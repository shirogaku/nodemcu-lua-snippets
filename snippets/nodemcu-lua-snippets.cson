'.source.lua':
#ADC
  'ADC read pin':
    'prefix': 'adcre'
    'body': 'adc.read(${0:channel})'
  'ADC read system voltage':
    'prefix': 'adcrs'
    'body': 'adc.readvdd33()'
  'ADC force init mode':
    'prefix': 'adcmin'
    'body': 'adc.read_init_mode(${0:mode_value})'
#ADC Constants
  'ADC init adc constants':
    'prefix': 'adcmadc'
    'body': 'adc.INIT_ADC'
  'ADC init vdd33 constants':
    'prefix': 'adcmvdd'
    'body': 'adc.INIT_VDD33'
#ADXL345
  'ADXL345 initialize':
    'prefix': 'adxl345in'
    'body': 'adxl345.init(${1:sda}, ${2:scl})'
  'ADXL345 read':
    'prefix': 'adxl345re'
    'body': 'adxl345.read()'
#AM2320
  'AM2320 initialize':
    'prefix': 'am2320in'
    'body': 'am2320.init(${1:sda}, ${2:scl})'
  'AM2320 read':
    'prefix': 'am2320re'
    'body': 'am2320.read()'
#APA102
  'APA102 write':
    'prefix': 'apa102w'
    'body': 'apa102.write(${1:data_pin}, ${2:clock_pin}, ${3:string})'
#bit
  'BIT arithmeic right shift':
    'prefix': 'bitars'
    'body': 'bit.arshift(${1:value}, ${2:shift})'
  'BIT AND operation':
    'prefix': 'bitand'
    'body': 'bit.band(${1:value1}, ${2:value2})'
  'BIT generate number with a 1 bit':
    'prefix': 'bitbit'
    'body': 'bit.bit(${1:position})'
  'BIT NOT operation':
    'prefix': 'bitnot'
    'body': 'bit.bnot(${1:value})'
  'BIT OR operation':
    'prefix': 'bitor'
    'body': 'bit.bor(${1:value1}, ${2:value2})'
  'BIT XOR operation':
    'prefix': 'bitxor'
    'body': 'bit.bxor(${1:value1}, ${2:value2})'
  'BIT clear':
    'prefix': 'bitclear'
    'body': 'bit.clear(${1:value}, ${2:position})'
  'BIT is clear':
    'prefix': 'biticlear'
    'body': 'bit.isclear(${1:value}, ${2:position})'
  'BIT is set':
    'prefix': 'bitiset'
    'body': 'bit.isset(${1:value}, ${2:position})'
  'BIT left shift':
    'prefix': 'bitlsh'
    'body': 'bit.lshift(${1:value}, ${2:shift})'
  'BIT right shift':
    'prefix': 'bitrsh'
    'body': 'bit.rshift(${1:value}, ${2:shift})'
  'BIT set bit':
    'prefix': 'bitset'
    'body': 'bit.set(${1:value}, ${2:position})'
#BME280
  'BME280 get altitude':
    'prefix': 'bme280alt'
    'body': 'bme280.altitude(${1:p}, ${2:qnh})'
  'BME280 get barometer value':
    'prefix': 'bme280ba'
    'body': 'bme280.boro()'
  'BME280 get dew point':
    'prefix': 'bme280dew'
    'body': 'bme280.dewpoint(${1:h}, ${2:t})'
  'BME280 get humidlity':
    'prefix': 'bme280hum'
    'body': 'bme280.humi()'
  'BME280 initialize':
    'prefix': 'bme280in'
    'body': 'bme280.init(${1:sda}, ${2:scl})'
  'BME280 QFE to QNH':
    'prefix': 'bme280q2q'
    'body': 'bme280.qfe2qnh(${1:p}, ${2:altitude})'
  'BME280 forced mode':
    'prefix': 'bme280str'
    'body': 'bme280.startreadout(${1:delay}, ${2:callback})'
  'BME280 get tempurature':
    'prefix': 'bme280temp'
    'body': 'bme280.temp()'
#BMP085
  'BMP085 initialize':
    'prefix': 'bmp085in'
    'body': 'bmp085.init(${1:sca}, ${2:scl})'
  'BMP085 get tempurature':
    'prefix': 'bmp085temp'
    'body': 'bmp085.temperature()'
  'BMP085 get pressure':
    'prefix': 'bmp085pres'
    'body': 'bmp085.pressure(${0:oversampling_rate})'
  'BMP085 get raw pressure':
    'prefix': 'bmp085rpres'
    'body': 'bmp085.pressure_raw(${0:oversampling_rate})'
#CJSON
  'CJSON encode':
    'prefix': 'cjsonen'
    'body': 'cjson.encode(${0:table})'
  'CJSON decode':
    'prefix': 'cjsonde'
    'body': 'cjson.decide(${0:string})'
#CoAP
  'CoAP create client':
    'prefix': 'coapcc'
    'body': 'coap.Client()'
  'CoAP create server':
    'prefix': 'coapcs'
    'body': 'coap.Server()'
  'CoAP client get':
    'prefix': 'coapcget'
    'body': 'get(${1:type}, ${2:uri}, ${3:payload})'
  'CoAP client put':
    'prefix': 'coapcput'
    'body': 'put(${1:type}, ${2:uri}, ${3:payload})'
  'CoAP client post':
    'prefix': 'coapcpost'
    'body': 'post(${1:type}, ${2:uri}, ${3:payload})'
  'CoAP client delete':
    'prefix': 'coapcdel'
    'body': 'delete(${1:type}, ${2:uri}, ${3:payload})'
  'CoAP server listen':
    'prefix': 'coapslis'
    'body': 'listen(${1:port}, ${2:ip})'
  'CoAP server close':
    'prefix': 'coapsclo'
    'body': 'close()'
  'CoAP server register variable':
    'prefix': 'coapsrv'
    'body': 'var("${1:name}", ${2:content_type})'
  'CoAP server register function':
    'prefix': 'coapsrf'
    'body': 'func("${1:name}", ${2:content_type})'
#CoAP constants
  'CoAP CON request constants':
    'prefix': 'coapcon'
    'body': 'coap.CON'
  'CoAP NON request constants':
    'prefix': 'coapnon'
    'body': 'coap.NON'
  'CoAP text type constants':
    'prefix': 'coaptext'
    'body': 'coap.TEXT_PLAIN'
  'CoAP link type constants':
    'prefix': 'coaplink'
    'body': 'coap.LINKFORMAT'
  'CoAP xml type constants':
    'prefix': 'coapxml'
    'body': 'coap.XML'
  'CoAP octet stream type constant':
    'prefix': 'coapstream'
    'body': 'coap.OCTET_STREAM'
  'CoAP exi type constant':
    'prefix': 'coapexi'
    'body': 'coap.EXI'
  'CoAP json type constant':
    'prefix': 'coapjson'
    'body': 'coap.JSON'
